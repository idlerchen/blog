package com.fenbi.blog.servlet;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.alibaba.fastjson.JSON;
import com.fenbi.blog.bean.User;
import com.fenbi.blog.service.UserService;
import com.fenbi.blog.service.impl.UserServiceImpl;
import com.fenbi.blog.utils.WEButils;

public class UserServlet extends BaseServlet {

	private static final long serialVersionUID = 1L;
	
	UserService us = new UserServiceImpl();

	public void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		
		User loginUser = us.getUser(username, password);
		
		if(loginUser != null) {
			// 登陆成功了，将用户名以Cookie的形式发送给浏览器，浏览器保存信息。
			Cookie cookie = new Cookie("username", loginUser.getUsername());
			
			// 设置有效时间  3天
			cookie.setMaxAge(60*60*24*3);
			
			// 设置Cookie的有效路径
			cookie.setPath(request.getContextPath() + "/page/user/login.jsp");
			
			response.addCookie(cookie);
			
			HttpSession session = request.getSession();
			session.setAttribute("loginUser", loginUser);
			
			//成功，重定向到首页
			response.sendRedirect(request.getContextPath()+"/BlogServlet?method=getAllBlog");
		}
		else {
			//登录失败，转发登录页面继续登录,待会错误提示的参数
			request.setAttribute("msg", "登录失败");
			request.getRequestDispatcher("/page/user/login.jsp").forward(request, response);
		}
		
	}

	public void register(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		User user = WEButils.param2Bean(request, new User());
		int saveUser = us.saveUser(user);
		
		if(saveUser > 0) {
			response.sendRedirect(request.getContextPath()+"/page/user/login.jsp");
		}else {
			request.getRequestDispatcher("/page/user/register.jsp").forward(request, response);
		}
		
	}
	
	public void checkUsername(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String username = request.getParameter("username");
		
		User checkUsername = us.checkUsername(username);
		response.setContentType("application/json;charset=utf-8");

		// 设置map属性集
		HashMap<String, Object> map = new HashMap<>();
			
		if(checkUsername == null) {//没有该用户，可以注册
			map.put("code", 1);
			map.put("msg", "用户名可用");
		}else {//该用户已存在，不能注册
			map.put("code", 0);
			map.put("msg", "该用户名已存在");
		}
		// 将map属性集，转换成json字符串并发送给ajax
		String jsonStr = JSON.toJSONString(map);
		response.getWriter().print(jsonStr);
	}
	
	public void checkTelephone(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String telephone = request.getParameter("telephone");
		
		User checkTelephone = us.checkTelephone(telephone);
		response.setContentType("application/json;charset=utf-8");

		// 设置map属性集
		HashMap<String, Object> map = new HashMap<>();
			
		if(checkTelephone == null) {//没有该用户，可以注册
			map.put("code", 1);
			map.put("msg", "用户名可用");
		}else {//该用户已存在，不能注册
			map.put("code", 0);
			map.put("msg", "该用户名已存在");
		}
		// 将map属性集，转换成json字符串并发送给ajax
		String jsonStr = JSON.toJSONString(map);
		response.getWriter().print(jsonStr);
	}	
}